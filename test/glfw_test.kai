
#import "opengl"
#import "glfw"
#import "libc"

panic :: fn(msg: *u8) -> void {
    libc.printf("%s", msg)
    libc.exit(1)
}

main :: fn() -> void {

    window := initGlfw()
    if !window panic("Failed to create window")
    defer glfw.Terminate()

    libc.printf(nil)

    for !glfw.WindowShouldClose(window) {
        glfw.PollEvents()
        if glfw.GetKey(window, glfw.KEY_ESCAPE) break
        glfw.SwapBuffers(window)
    }
}

glfwErrorCallback :: fn(error: i32, desc: *u8) -> void {
    libc.printf("Error code %d:\n\t%s\n", error, desc)
}

initGlfw :: fn() -> *glfw.Window {
    glfw.SetErrorCallback(glfwErrorCallback)

    if !glfw.Init()
        return nil

    glfw.WindowHint(glfw.SAMPLES, 4)
    glfw.WindowHint(glfw.CONTEXT_VERSION_MAJOR, 3)
    glfw.WindowHint(glfw.CONTEXT_VERSION_MINOR, 3)
    glfw.WindowHint(glfw.OPENGL_PROFILE, glfw.OPENGL_CORE_PROFILE)
    glfw.WindowHint(glfw.OPENGL_FORWARD_COMPAT, 1)

    window := glfw.CreateWindow(1280, 720, "Kai GLFW example", nil, nil)
    if !window return nil

    glfw.MakeContextCurrent(window)

    return window
}

