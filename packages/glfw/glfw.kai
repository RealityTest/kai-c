
#library "glfw"


/*** Structs/types ***/
Window  :: struct #opaque
Monitor :: struct #opaque
Cursor  :: struct #opaque

/*
VidMode :: struct {
    width, height:                i32
    redBits, greenBits, blueBits: i32
    refreshRate:                  i32
};

GammaRamp :: struct {
    red, green, blue: *u16
    size:              u32
};

Image :: struct {
    width, height:  i32
    pixels:        *u8
};
*/
// temp
VidMode :: struct #opaque
GammaRamp :: struct #opaque
Image :: struct #opaque

/*** Procedure type declarations ***/

WindowPosFn       :: fn(*Window, i32, i32) -> void
WindowSizeFn      :: fn(*Window, i32, i32) -> void
WindowCloseFn     :: fn(*Window) -> void
WindowRefreshFn   :: fn(*Window) -> void
WindowFocusFn     :: fn(*Window, i32) -> void
WindowIconifyFn   :: fn(*Window, i32) -> void
MonitorFn         :: fn(*Window) -> void
FrameBufferSizeFn :: fn(*Window, i32, i32) -> void
DropFn            :: fn(*Window, i32, **u8) -> void

KeyFn             :: fn(*Window, i32, i32, i32, i32) -> void
MouseButtonFn     :: fn(*Window, i32, i32, i32) -> void
CursorPosFn       :: fn(*Window, i32, i32) -> void
ScrollFn          :: fn(*Window, f64, f64) -> void
CharFn            :: fn(*Window, u32) -> void
CharModsFn        :: fn(*Window, u32, i32) -> void
CursorEnterFn     :: fn(*Window, i32) -> void
JoyStickFn        :: fn(i32, i32) -> void

ErrorFn           :: fn(i32, *u8) -> void

/*** Functions ***/
#foreign glfw #callconv "c" #linkprefix "glfw" {
    Init :: fn() -> i32
    Terminate :: fn() -> void

    GetVersion :: fn(major, minor, rev: *i32) -> void
    GetVersionString :: fn() -> *u8

    GetMonitors :: fn(count: *i32) -> **Monitor
    GetPrimaryMonitor :: fn() -> *Monitor
    GetMonitorPos :: fn(monitor: *Monitor, xpos, ypos: *i32) -> void
    GetMonitorPhysicalSize :: fn(monitor: *Monitor, widthMM, heightMM: *i32) -> void
    GetMonitorName :: fn(monitor: *Monitor) -> *i8

    GetVideoModes :: fn(monitor: *Monitor, count: *i32) -> *VidMode
    GetVideoMode :: fn(monitor: *Monitor) -> *VidMode

    SetGamma :: fn(monitor: *Monitor, gamma: f32) -> void
    GetGammaRamp :: fn(monitor: *Monitor) -> *GammaRamp
    SetGammaRamp :: fn(monitor: *Monitor, ramp: *GammaRamp) -> void

    CreateWindow :: fn(width, height: i32, title: *u8, monitor: *Monitor, share: *Window) -> *Window
    DestroyWindow :: fn(window: *Window) -> void

    WindowHint :: fn(hint, value: i32) -> void
    DefaultWindowHints :: fn() -> void

    WindowShouldClose :: fn(window: *Window) -> i32
    SetWindowShouldClose :: fn(window: *Window, value: i32) -> void

    SwapInterval :: fn(interval: i32) -> void
    SwapBuffers :: fn(window: *Window) -> void

    SetWindowTitle :: fn(window: *Window, title: *u8) -> void
    SetWindowIcon :: fn(window: *Window, count: i32, images: *Image) -> void
    GetWindowPos :: fn(window: *Window, xpos, ypos: *i32) -> void
    SetWindowPos :: fn(window: *Window, xpos, ypos: i32) -> void
    GetWindowSize :: fn(window: *Window, width, height: *i32) -> void
    SetWindowSizeLimits :: fn(window: *Window, minwidth, minheight, maxwidth, maxheight: i32) -> void
    SetWindowAspectRatio :: fn(window: *Window, numer, denom: i32) -> void
    SetWindowSize :: fn(window: *Window, width, height: i32) -> void
    GetFramebufferSize :: fn(window: *Window, width, height: *i32) -> void
    GetWindowFrameSize :: fn(window: *Window, left, top, right, bottom: *i32) -> void

    IconifyWindow :: fn(window: *Window) -> void
    RestoreWindow :: fn(window: *Window) -> void
    MaximizeWindow :: fn(window: *Window) -> void
    ShowWindow :: fn(window: *Window) -> void
    HideWindow :: fn(window: *Window) -> void
    FocusWindow :: fn(window: *Window) -> void

    GetWindowMonitor :: fn(window: *Window) -> void
    SetWindowMonitor :: fn(window: *Window, monitor: *Monitor, xpos, ypos, width, height, refreshRate: i32)  -> void
    GetWindowAttrib :: fn(window: *Window, attrib: i32) -> i32
    SetWindowUserPointer :: fn(window: *Window, pointer: rawptr) -> void
    GetWindowUserPointer :: fn(window: *Window) -> rawptr

    PollEvents :: fn() -> void
    WaitEvents :: fn() -> void
    WaitEventsTimeout :: fn(timeout: f64) -> void
    PostEmptyEvent :: fn() -> void

    GetInputMode :: fn(window: *Window, mode: i32) -> i32
    SetInputMode :: fn(window: *Window, mode, value: i32) -> void

    GetKey :: fn(window: *Window, key: i32) -> i32
    GetKeyName :: fn(key, scancode: i32) -> *u8
    GetMouseButton :: fn(window: *Window, button: i32) -> i32
    GetCursorPos :: fn(window: *Window, xpos, ypos: *f64) -> void

    SetCursorPos :: fn(window: *Window, xpos, ypos: f64) -> void

    CreateCursor :: fn(image: *Image, xhot, yhot: i32) -> *Cursor
    DestroyCursor :: fn(cursor: *Cursor) -> void
    SetCursor :: fn(window: *Window, cursor: *Cursor) -> void
    CreateStandardCursor :: fn(shape: i32) -> *Cursor

    JoystickPresent :: fn(joy: i32) -> i32
    GetJoystickAxes :: fn(joy: i32, count: *i32) -> *f32
    GetJoystickButtons :: fn(joy: i32, count: *i32) -> *u8
    GetJoystickName :: fn(joy: i32) -> *u8

    SetClipboardString :: fn(window: *Window, str: *u8) -> void
    GetClipboardString :: fn(window: *Window) -> *u8

    GetTime :: fn() -> f64
    SetTime :: fn(time: f64) -> void
    GetTimerValue :: fn() -> u64
    GetTimerFrequency :: fn() -> u64

    MakeContextCurrent :: fn(window: *Window) -> void
    GetCurrentContext :: fn() -> *Window
    GetProcAddress :: fn(name : *u8) -> rawptr
    ExtensionSupported :: fn(extension: *u8) -> i32
    VulkanSupported :: fn() -> i32

    GetRequiredInstanceExtensions ::  fn(count: *u32) -> **u8

    SetMonitorCallback :: fn(window: *Window, cbfun: MonitorFn) -> MonitorFn
    SetFramebuffersizeCallback :: fn(window: *Window, cbfun: FrameBufferSizeFn) -> FrameBufferSizeFn
    SetWindowPosCallback :: fn(window: *Window, cbfun: WindowPosFn) -> WindowPosFn
    SetWindowSizeCallback :: fn(window: *Window, cbfun: WindowSizeFn) -> WindowSizeFn
    SetWindowCloseCallback :: fn(window: *Window, cbfun: WindowCloseFn) -> WindowCloseFn
    SetWindowRefreshCallback :: fn(window: *Window, cbfun: WindowRefreshFn) -> WindowRefreshFn
    SetWindowFocusCallback :: fn(window: *Window, cbfun: WindowFocusFn) -> WindowFocusFn
    SetWindowIconifyCallback :: fn(window: *Window, cbfun: WindowIconifyFn) -> WindowIconifyFn
    SetDropCallback :: fn(window: *Window, cbfun: DropFn) -> DropFn

    SetKeyCallback :: fn(window: *Window, cbfun: KeyFn) -> KeyFn
    SetMouseButtonCallback :: fn(window: *Window, cbfun: MouseButtonFn) -> MouseButtonFn
    SetCursorPosCallback :: fn(window: *Window, cbfun: CursorPosFn) -> CursorPosFn
    SetScrollCallback :: fn(window: *Window, cbfun: ScrollFn) -> ScrollFn
    SetCharCallback :: fn(window: *Window, cbfun: CharFn) -> CharFn
    SetCharModsCallback :: fn(window: *Window, cbfun: CharModsFn) -> CharModsFn
    SetCursorEnterCallback :: fn(window: *Window, cbfun: CursorEnterFn) -> CursorEnterFn
    SetJoystickCallback :: fn(window: *Window, cbfun: JoyStickFn) -> JoyStickFn

    SetErrorCallback :: fn(cbfun: ErrorFn) -> ErrorFn
}

/*** Constants ***/
/* Versions */
VERSION_MAJOR    :: 3;
VERSION_MINOR    :: 2;
VERSION_REVISION :: 1;

/* Booleans */
TRUE  :: 1;
FALSE :: 0;

/* Button/Key states */
RELEASE :: 0;
PRESS   :: 1;
REPEAT  :: 2;

/* The unknown key */
KEY_UNKNOWN :: -1;

/** Printable keys **/

/* Named printable keys */
KEY_SPACE         :: 32;
KEY_APOSTROPHE    :: 39;  /* ' */
KEY_COMMA         :: 44;  /* , */
KEY_MINUS         :: 45;  /* - */
KEY_PERIOD        :: 46;  /* . */
KEY_SLASH         :: 47;  /* / */
KEY_SEMICOLON     :: 59;  /* ; */
KEY_EQUAL         :: 61;  /* :: */
KEY_LEFT_BRACKET  :: 91;  /* [ */
KEY_BACKSLASH     :: 92;  /* \ */
KEY_RIGHT_BRACKET :: 93;  /* ] */
KEY_GRAVE_ACCENT  :: 96;  /* ` */
KEY_WORLD_1       :: 161; /* non-US #1 */
KEY_WORLD_2       :: 162; /* non-US #2 */

/* Alphanumeric characters */
KEY_0 :: 48;
KEY_1 :: 49;
KEY_2 :: 50;
KEY_3 :: 51;
KEY_4 :: 52;
KEY_5 :: 53;
KEY_6 :: 54;
KEY_7 :: 55;
KEY_8 :: 56;
KEY_9 :: 57;

KEY_A :: 65;
KEY_B :: 66;
KEY_C :: 67;
KEY_D :: 68;
KEY_E :: 69;
KEY_F :: 70;
KEY_G :: 71;
KEY_H :: 72;
KEY_I :: 73;
KEY_J :: 74;
KEY_K :: 75;
KEY_L :: 76;
KEY_M :: 77;
KEY_N :: 78;
KEY_O :: 79;
KEY_P :: 80;
KEY_Q :: 81;
KEY_R :: 82;
KEY_S :: 83;
KEY_T :: 84;
KEY_U :: 85;
KEY_V :: 86;
KEY_W :: 87;
KEY_X :: 88;
KEY_Y :: 89;
KEY_Z :: 90;


/** Function keys **/

/* Named non-printable keys */
KEY_ESCAPE       :: 256;
KEY_ENTER        :: 257;
KEY_TAB          :: 258;
KEY_BACKSPACE    :: 259;
KEY_INSERT       :: 260;
KEY_DELETE       :: 261;
KEY_RIGHT        :: 262;
KEY_LEFT         :: 263;
KEY_DOWN         :: 264;
KEY_UP           :: 265;
KEY_PAGE_UP      :: 266;
KEY_PAGE_DOWN    :: 267;
KEY_HOME         :: 268;
KEY_END          :: 269;
KEY_CAPS_LOCK    :: 280;
KEY_SCROLL_LOCK  :: 281;
KEY_NUM_LOCK     :: 282;
KEY_PRINT_SCREEN :: 283;
KEY_PAUSE        :: 284;

/* Function keys */
KEY_F1  :: 290;
KEY_F2  :: 291;
KEY_F3  :: 292;
KEY_F4  :: 293;
KEY_F5  :: 294;
KEY_F6  :: 295;
KEY_F7  :: 296;
KEY_F8  :: 297;
KEY_F9  :: 298;
KEY_F10 :: 299;
KEY_F11 :: 300;
KEY_F12 :: 301;
KEY_F13 :: 302;
KEY_F14 :: 303;
KEY_F15 :: 304;
KEY_F16 :: 305;
KEY_F17 :: 306;
KEY_F18 :: 307;
KEY_F19 :: 308;
KEY_F20 :: 309;
KEY_F21 :: 310;
KEY_F22 :: 311;
KEY_F23 :: 312;
KEY_F24 :: 313;
KEY_F25 :: 314;

/* Keypad numbers */
KEY_KP_0 :: 320;
KEY_KP_1 :: 321;
KEY_KP_2 :: 322;
KEY_KP_3 :: 323;
KEY_KP_4 :: 324;
KEY_KP_5 :: 325;
KEY_KP_6 :: 326;
KEY_KP_7 :: 327;
KEY_KP_8 :: 328;
KEY_KP_9 :: 329;

/* Keypad named function keys */
KEY_KP_DECIMAL  :: 330;
KEY_KP_DIVIDE   :: 331;
KEY_KP_MULTIPLY :: 332;
KEY_KP_SUBTRACT :: 333;
KEY_KP_ADD      :: 334;
KEY_KP_ENTER    :: 335;
KEY_KP_EQUAL    :: 336;

/* Modifier keys */
KEY_LEFT_SHIFT    :: 340;
KEY_LEFT_CONTROL  :: 341;
KEY_LEFT_ALT      :: 342;
KEY_LEFT_SUPER    :: 343;
KEY_RIGHT_SHIFT   :: 344;
KEY_RIGHT_CONTROL :: 345;
KEY_RIGHT_ALT     :: 346;
KEY_RIGHT_SUPER   :: 347;
KEY_MENU          :: 348;

KEY_LAST :: KEY_MENU;

/* Bitmask for modifier keys */
MOD_SHIFT   :: 0x0001;
MOD_CONTROL :: 0x0002;
MOD_ALT     :: 0x0004;
MOD_SUPER   :: 0x0008;

/* Mouse buttons */
MOUSE_BUTTON_1 :: 0;
MOUSE_BUTTON_2 :: 1;
MOUSE_BUTTON_3 :: 2;
MOUSE_BUTTON_4 :: 3;
MOUSE_BUTTON_5 :: 4;
MOUSE_BUTTON_6 :: 5;
MOUSE_BUTTON_7 :: 6;
MOUSE_BUTTON_8 :: 7;

/* Mousebutton aliases */
MOUSE_BUTTON_LAST   :: MOUSE_BUTTON_8;
MOUSE_BUTTON_LEFT   :: MOUSE_BUTTON_1;
MOUSE_BUTTON_RIGHT  :: MOUSE_BUTTON_2;
MOUSE_BUTTON_MIDDLE :: MOUSE_BUTTON_3;

/* Joystick buttons */
JOYSTICK_1  :: 0;
JOYSTICK_2  :: 1;
JOYSTICK_3  :: 2;
JOYSTICK_4  :: 3;
JOYSTICK_5  :: 4;
JOYSTICK_6  :: 5;
JOYSTICK_7  :: 6;
JOYSTICK_8  :: 7;
JOYSTICK_9  :: 8;
JOYSTICK_10 :: 9;
JOYSTICK_11 :: 10;
JOYSTICK_12 :: 11;
JOYSTICK_13 :: 12;
JOYSTICK_14 :: 13;
JOYSTICK_15 :: 14;
JOYSTICK_16 :: 15;

JOYSTICK_LAST :: JOYSTICK_16;


/* Error constants */
NOT_INITIALIZED     :: 0x00010001;
NO_CURRENT_CONTEXT  :: 0x00010002;
INVALID_ENUM        :: 0x00010003;
INVALID_VALUE       :: 0x00010004;
OUT_OF_MEMORY       :: 0x00010005;
API_UNAVAILABLE     :: 0x00010006;
VERSION_UNAVAILABLE :: 0x00010007;
PLATFORM_ERROR      :: 0x00010008;
FORMAT_UNAVAILABLE  :: 0x00010009;
NO_WINDOW_CONTEXT   :: 0x0001000A;

/* Window attributes */
FOCUSED      :: 0x00020001;
ICONIFIED    :: 0x00020002;
RESIZABLE    :: 0x00020003;
VISIBLE      :: 0x00020004;
DECORATED    :: 0x00020005;
AUTO_ICONIFY :: 0x00020006;
FLOATING     :: 0x00020007;
MAXIMIZED    :: 0x00020008;

/* Pixel window attributes */
RED_BITS         :: 0x00021001;
GREEN_BITS       :: 0x00021002;
BLUE_BITS        :: 0x00021003;
ALPHA_BITS       :: 0x00021004;
DEPTH_BITS       :: 0x00021005;
STENCIL_BITS     :: 0x00021006;
ACCUM_RED_BITS   :: 0x00021007;
ACCUM_GREEN_BITS :: 0x00021008;
ACCUM_BLUE_BITS  :: 0x00021009;
ACCUM_ALPHA_BITS :: 0x0002100A;
AUX_BUFFERS      :: 0x0002100B;
STEREO           :: 0x0002100C;
SAMPLES          :: 0x0002100D;
SRGB_CAPABLE     :: 0x0002100E;
REFRESH_RATE     :: 0x0002100F;
DOUBLEBUFFER     :: 0x00021010;

/* Context window attributes */
CLIENT_API               :: 0x00022001;
CONTEXT_VERSION_MAJOR    :: 0x00022002;
CONTEXT_VERSION_MINOR    :: 0x00022003;
CONTEXT_REVISION         :: 0x00022004;
CONTEXT_ROBUSTNESS       :: 0x00022005;
OPENGL_FORWARD_COMPAT    :: 0x00022006;
OPENGL_DEBUG_CONTEXT     :: 0x00022007;
OPENGL_PROFILE           :: 0x00022008;
CONTEXT_RELEASE_BEHAVIOR :: 0x00022009;
CONTEXT_NO_ERROR         :: 0x0002200A;
CONTEXT_CREATION_API     :: 0x0002200B;

/* APIs */
NO_API        :: 0;
OPENGL_API    :: 0x00030001;
OPENGL_ES_API :: 0x00030002;

/* Robustness? */
NO_ROBUSTNESS         :: 0;
NO_RESET_NOTIFICATION :: 0x00031001;
LOSE_CONTEXT_ON_RESET :: 0x00031002;

/* OpenGL Profiles */
OPENGL_ANY_PROFILE    :: 0;
OPENGL_CORE_PROFILE   :: 0x00032001;
OPENGL_COMPAT_PROFILE :: 0x00032002;

/* Cursor draw state and whether keys are sticky */
CURSOR               :: 0x00033001;
STICKY_KEYS          :: 0x00033002;
STICKY_MOUSE_BUTTONS :: 0x00033003;

/* Cursor draw state */
CURSOR_NORMAL   :: 0x00034001;
CURSOR_HIDDEN   :: 0x00034002;
CURSOR_DISABLED :: 0x00034003;

/* Behavior? */
ANY_RELEASE_BEHAVIOR   :: 0;
RELEASE_BEHAVIOR_FLUSH :: 0x00035001;
RELEASE_BEHAVIOR_NONE  :: 0x00035002;

/* Context API ? */
NATIVE_CONTEXT_API :: 0x00036001;
EGL_CONTEXT_API    :: 0x00036002;

/* Types of cursors */
ARROW_CURSOR     :: 0x00036001;
IBEAM_CURSOR     :: 0x00036002;
CROSSHAIR_CURSOR :: 0x00036003;
HAND_CURSOR      :: 0x00036004;
HRESIZE_CURSOR   :: 0x00036005;
VRESIZE_CURSOR   :: 0x00036006;

/* Joystick? */
CONNECTED    :: 0x00040001;
DISCONNECTED :: 0x00040002;

/*  */
DONT_CARE :: -1;

